% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/request.R
\name{tres_encrypt}
\alias{tres_encrypt}
\alias{tres_decrypt}
\title{Encrypt and Decrypt Values using TRES Service}
\usage{
tres_encrypt(values, connection, chunk_size = 1000, keep_invalid = NULL, ...)

tres_decrypt(values, connection, chunk_size = 1000, keep_invalid = NULL, ...)
}
\arguments{
\item{values}{Character vector. Values to be encrypted or decrypted.}

\item{connection}{An \link{rtres_connection}.}

\item{chunk_size}{Integer. The number of values to process in each chunk (default: 1000). Disable chunking with 0.}

\item{keep_invalid}{Boolean or NULL. Whether to keep values that cannot be encrypted or decrypted or return NA (default: NULL, meaning the setting in the connection object is used).}

\item{...}{Additional parameters to temporarily override any settings in the connection object, such as \code{search_image}.}
}
\value{
A character vector containing the encrypted or decrypted values.
}
\description{
These functions encrypt and decrypt the provided values using the TRES service.
}
\examples{
con <- rtres:::local_connect()

# Normal input
input <- c("One", "Two")
(encrypted_input <- tres_encrypt(input, con))

tres_decrypt(encrypted_input, con)

# Some invalid input with keep_invalid = FALSE (default)
input <- c("One", " ", NA)
(encrypted_input <- tres_encrypt(input, con))

tres_decrypt(encrypted_input, con)

# Same invalid input with keep_invalid = TRUE
(encrypted_input <- tres_encrypt(input, con, keep_invalid = TRUE))

tres_decrypt(encrypted_input, con, keep_invalid = TRUE)

}
\seealso{
\code{\link{tres_connect}}
}
